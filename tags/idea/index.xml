<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>idea - Tag - Xing Lin</title>
        <link>https://xinglin.github.io/tags/idea/</link>
        <description>idea - Tag - Xing Lin</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>linxingnku@gmail.com (Xing Lin)</managingEditor>
            <webMaster>linxingnku@gmail.com (Xing Lin)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 22 Feb 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://xinglin.github.io/tags/idea/" rel="self" type="application/rss+xml" /><item>
    <title>Idea Repository</title>
    <link>https://xinglin.github.io/idea-repository/</link>
    <pubDate>Mon, 22 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>Xing Lin</author>
    <guid>https://xinglin.github.io/idea-repository/</guid>
    <description><![CDATA[List of ideas to explore.
Interaction between a filesystem and a computational SSD that does transparent compression.
Problem: How to manage SSD space in this case? What API should be use? Can use SSDSim to explore the design space. Key prefix compression in k/v store
Problem: in levelDB, it uses fixed-size key prefix compression. Can we do better than this? In Rockset/Foundationdb, secondary indexes are stored as &lt;key, null&gt; key/value pairs.]]></description>
</item>
<item>
    <title>Secondary Index Built on top of a Key-value Store</title>
    <link>https://xinglin.github.io/secondary-index-kv-store/</link>
    <pubDate>Sun, 17 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>Xing Lin</author>
    <guid>https://xinglin.github.io/secondary-index-kv-store/</guid>
    <description><![CDATA[Key-value stores such as RocksDB have been used as the storage engine in several databases (MySQL/Mongo/Rockset/FoundationDB). A database typically requires support of secondary indexes. To support secondary index, a common approach is to store the secondary index as yet another key-value pairs. Let&rsquo;s take a look at the following example.
Employee table
userid (primary key) salary age Alice 40000 30 Bob 20000 23 Charlie 30000 30 David 20000 25 To store the user table, we can store each record using tableName,primary_key -&gt; salary,age as key/value pairs.]]></description>
</item>
<item>
    <title>Postgres Handling Transaction ID Wrap Around</title>
    <link>https://xinglin.github.io/postgres-tid-wraparound/</link>
    <pubDate>Thu, 17 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>Xing Lin</author>
    <guid>https://xinglin.github.io/postgres-tid-wraparound/</guid>
    <description><![CDATA[NOTE: OpenGauss may fix this problem.
Three special values are reserved as special transaction IDs, including invalid, bootstrap and frozen transactions. The rest values are used in a circular fashion.
Once a row is older enough (controlled by vacuum_freeze_min_age, an integer value measuring the number of transactions), the vaccum process can mark its TID as FrozenTransactionId. FrozenTransactionId is smaller than any normal transaction ID and thus these frozen rows are visible for all current and future transactions.]]></description>
</item>
</channel>
</rss>
