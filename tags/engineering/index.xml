<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>engineering - Tag - Xing Lin</title>
        <link>https://xinglin.github.io/tags/engineering/</link>
        <description>engineering - Tag - Xing Lin</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>linxingnku@gmail.com (Xing Lin)</managingEditor>
            <webMaster>linxingnku@gmail.com (Xing Lin)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 13 Aug 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://xinglin.github.io/tags/engineering/" rel="self" type="application/rss+xml" /><item>
    <title>Open-Channel SSD</title>
    <link>https://xinglin.github.io/ocssd/</link>
    <pubDate>Tue, 13 Aug 2019 00:00:00 &#43;0000</pubDate>
    <author>Xing Lin</author>
    <guid>https://xinglin.github.io/ocssd/</guid>
    <description><![CDATA[In Linux pblk implementation, a line corresponds to a chunk which is one erase block. A LUN is a PU. A group is a channel.
  Eventually, pblk calls pblk_submit_read() and pblk_submit_write() for reads/writes to the device.
  Read code path (from the media) in pblk
  1 2 3 4 5 6 7 8 9  /* pblk-read.c */ pblk_submit_read() pblk_read_ppalist_rq(); or pblk_read_rq(); pblk_lookup_l2p_seq(); // get physical addresses pblk_submit_io(pblk, rqd); nvm_submit_io(dev, rqd); dev-&gt;ops-&gt;submit_io(dev, rqd);    Write code path in pblk  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  pblk_write_to_cache() { for (i = 0; i &lt; nr_entries; i++) { void *data = bio_data(bio); w_ctx.]]></description>
</item>
<item>
    <title>DAX in ext2 filesystem</title>
    <link>https://xinglin.github.io/ext2-dax/</link>
    <pubDate>Thu, 24 Jan 2019 00:00:00 &#43;0000</pubDate>
    <author>Xing Lin</author>
    <guid>https://xinglin.github.io/ext2-dax/</guid>
    <description><![CDATA[msync syscall 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /mm/msync.c / * MS_SYNC syncs the entire file - including mappings. */ SYSCALL_DEFINE3(msync, unsigned long, start, size_t, len, int, flags) vfs_fsync_range(file, fstart, fend, 1); file-&gt;f_op-&gt;fsync(file, start, end, datasync); == ext2_fsync(); generic_file_fsync(file, start, end, datasync); __generic_file_fsync(struct file *file, loff_t start, loff_t end, int datasync) file_write_and_wait_range(file, start, end); __filemap_fdatawrite_range(mapping, lstart, lend, WB_SYNC_ALL); do_writepages(mapping, &amp;wbc); mapping-&gt;a_ops-&gt;writepages(mapping, wbc); ext2_dax_writepages() dax_writeback_mapping_range(mapping, mapping-&gt;host-&gt;i_sb-&gt;s_bdev, wbc); dax_writeback_one(&amp;xas, dax_dev, mapping, entry); dax_flush(dax_dev, page_address(pfn_to_page(pfn)), size); arch_wb_cache_pmem(addr, size); clean_cache_range(addr, size); for (p = (void *)((unsigned long)addr &amp; ~clflush_mask); p &lt; vend; p += x86_clflush_size) clwb(p); static const struct address_space_operations ext2_dax_aops = { .]]></description>
</item>
<item>
    <title>Read syscall implementation in Linux Kernel</title>
    <link>https://xinglin.github.io/linux-read-path/</link>
    <pubDate>Wed, 16 Jan 2019 00:00:00 &#43;0000</pubDate>
    <author>Xing Lin</author>
    <guid>https://xinglin.github.io/linux-read-path/</guid>
    <description><![CDATA[Interactions among vfs, page cache, and ext2 on serving a read request stack trace for ext2_readpages() in ext2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  [ 84.037457] Call Trace: [ 84.037458] dump_stack+0x46/0x5b [ 84.037460] ext2_readpages+0x3e/0x90 [ 84.037464] read_pages+0x71/0x1a0 [ 84.037470] ? __do_page_cache_readahead+0x1c9/0x1e0 [ 84.037472] __do_page_cache_readahead+0x1c9/0x1e0 [ 84.037474] ondemand_readahead+0x171/0x2b0 [ 84.037478] ? pagecache_get_page+0x30/0x2c0 [ 84.]]></description>
</item>
<item>
    <title>Systems and services built on top of postgreSQL</title>
    <link>https://xinglin.github.io/postgresql/</link>
    <pubDate>Sun, 02 Dec 2018 00:00:00 &#43;0000</pubDate>
    <author>Xing Lin</author>
    <guid>https://xinglin.github.io/postgresql/</guid>
    <description><![CDATA[It is surprised to come across several systems/services that happen to built on top of postgreSQL. Here is a quick summary of these.
   Systems/services Type     AWS Redshift data warehousing   TimeScale time series database   openGauss/GaussDB distributed relational db, by Huawei      AWS Redshift: Redshift is a data warehousing service offered by AWS. It is built on postgreSQL, with a new columnar storage engine.]]></description>
</item>
</channel>
</rss>
